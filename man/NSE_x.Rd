% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optim_w.R
\name{NSE_x}
\alias{NSE_x}
\title{Compute Normalized Squared Error (NSE)}
\usage{
NSE_x(w, F, X, Z, t_max, dr, dt, i_max, target = "X")
}
\arguments{
\item{w}{A numeric weight vector of length \code{J}, where \code{J = i_max - 1}.}

\item{F}{A numeric matrix representing outcome variables in the reference domain.}

\item{X}{A numeric matrix for covariates in target domain.}

\item{Z}{A numeric matrix of covariates in reference domain.}

\item{t_max}{An integer. The number of time points used for outcome in reference domain (used for \code{F}).}

\item{dr}{An integer. The number of covariates in the reference domain \code{Z}.}

\item{dt}{An integer. The number of covariates in the target domain \code{X}.}

\item{i_max}{An integer. Total number of units, including treated and donor units.}

\item{target}{A character string. Indicates which matrix to compute the error for: \code{"F"}, \code{"X"}, or \code{"Z"}. Default is \code{"X"}.}
}
\value{
A numeric scalar representing the normalized squared error.
}
\description{
This function calculates the normalized squared error (NSE) between
a target unit and control units.
It can be applied to different data matrices: \code{F}, \code{X}, or \code{Z},
depending on the value of the \code{target} parameter.
}
\examples{
w <- runif(3)
F <- matrix(rnorm(40), nrow = 4)
X <- matrix(rnorm(40), nrow = 4)
Z <- matrix(rnorm(40), nrow = 4)
NSE_x(w, F, X, Z, t_max = 10, dr = 10, dt = 10, i_max = 4, target = "X")

}
